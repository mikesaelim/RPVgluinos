
///////////////////////////////////////
// RPV Gluinos project - Mike Saelim //
///////////////////////////////////////

This repository contains a sample of some of the code we used in our Snowmass 2013 Community Summer Study paper:

   RPV SUSY with Same-Sign Dileptons at LHC14
     Michael Saelim, Maxim Perelstein
     Preprint available at http://arxiv.org/abs/1309.7707

which is a major update of the code we used in our paper (but not an update of the analysis):

   The Same-Sign Dilepton Signature of RPV/MFV SUSY
     Joshua Berger, Maxim Perelstein, Michael Saelim, Philip Tanedo
     Journal of High Energy Physics: JHEP04(2013)077
     Preprint available at http://arxiv.org/abs/1302.2146

This code is provided as is, to serve as a sample of the code I've written in my particle physics research.  All of the code was written by me.  It is provided under a Creative Commons CC-BY license: http://creativecommons.org/licenses/by/3.0/us/.  Any questions can be addressed to mike.saelim@gmail.com.



It implements an analysis of Monte Carlo events (simulated proton-proton collisions at the Large Hadron Collider) that seeks to pick out signals of new, not-yet-discovered elementary particles out of a large background of already-discovered elementary particles.  Our analysis is the same as the same-sign dilepton plus b-tagged jets analysis done by the CMS experiment in http://arxiv.org/abs/1212.6194 but with the addition of a requirement that at least N jets have an invariant mass greater than the top quark mass.  At the end of the chain of analysis programs, the rate at which the Monte Carlo events pass these filters, as well as other information, is output to a flat data file in /Results/ and analyzed in a Mathematica notebook.



This code comes in a few parts:
(1) Analyzer.py automates the entire analysis chain, for both background and signal events.

(2) GenerateInputs.cc generates the .spc and .cmnd input files for our signal process, which get input into Hadronizer.cc.
(3) Hadronizer.cc hadronizes the events with PYTHIA, and outputs the result as a HepMC file which gets input into Delphes.  For our signal process, it takes in the .spc and .cmnd files and generates the Monte Carlo events.  For background processes, it takes in LHE files created previously with MadGraph.
(4) Delphes/ contains the Delphes card and the SaelimEfficiency module written for the detector simulation.  The SaelimEfficiency module must be installed into the local Delphes program.
(5) JetMassCutAnalysis.cc takes in the ROOT file created by Delphes, implements the event-level analysis, and outputs the results.

(6) JetMassCutAnalysis.nb is a Mathematica notebook that parses the results and generates exclusion and reach plots for the paper.

Other files:
* Kfactors_GPP_14TeV is a list of NLO K-factors for gluino pair-production at the 14 TeV LHC, generated previously by Prospino 2.1.



Programs and C++ libraries used:
* MadGraph 5 program for Monte Carlo event generation: https://launchpad.net/madgraph5
* PYTHIA 8 library for Monte Carlo event generation, showering, and hadronization: http://home.thep.lu.se/~torbjorn/Pythia.html
* FastJet 3 library for jet clustering: http://fastjet.fr/
* Delphes 3 program/library for simple detector simulation: https://cp3.irmp.ucl.ac.be/projects/delphes
* Mathematica for data parsing and analysis: http://www.wolfram.com/mathematica/

File formats used:
* LHE event record file format: http://home.thep.lu.se/~leif/LHEF/
* HepMC event record file format: http://lcgapp.cern.ch/project/simu/HepMC/
* ROOT file format: http://root.cern.ch/drupal/



