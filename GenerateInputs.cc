// GenerateInputs.cc

// 8/27/13: This code generates the SLHA spectrum (SPC) file and the Pythia command (CMND) file for gluino pair production in the MFV gluino-stop simplified model.  
//   These files are designed to be inputs to the Hadronizer program.

//   If m(stop) + m(top) < m(gluino), we force a cascade decay g~ > t t~* > tbs via on-shell stop.
//   If m(stop) + m(top) > m(gluino), we force a 3-body decay g~ > tbs via off-shell stop.
//   There is no intermediate region near the threshold.

//   W's are forced to decay leptonically because that is the only way to get same-sign dileptons.


// It is called with 6 command-line arguments:
//    * (string)        path to the output SPC file
//    * (string)        path to the output CMND file
//    * (unsigned int)  number of MC events to generate
//    * (unsigned int)  CM energy in TeV
//    * (double)        gluino mass in GeV
//    * (double)        stop mass in GeV


// Output is a SPC file with the MFV SUSY spectrum for the simplified model, and a CMND file listing Pythia8 commands for generating the events.

// This program must be compiled with the associated Makefile.





//////////////// Other program notes /////////////////

// Masses and energies in GeV.  Cross sections in pb.




#include <cstdlib>
#include <cstdio>
#include <string>




int main(int argc, char *argv[]) {

  // Require 6 command-line arguments
  if(argc != 7) {
    printf("!!!  ERROR: Wrong number of command-line arguments  !!!\n");
    printf("!!!     1st argument: path to the output SPC file\n");
    printf("!!!     2nd argument: path to the output CMND file\n");
    printf("!!!     3rd argument: number of MC events to generate\n");
    printf("!!!     4th argument: CM energy in TeV\n");
    printf("!!!     5th argument: gluino mass in GeV\n");
    printf("!!!     6th argument: stop mass in GeV\n");
    exit(1);
  }


  //************************** Retrieving command-line inputs **************************//
  // Run variables
  //    Inputs
  std::string const output_spc_filename = argv[1];    // Path to the output SPC file
  std::string const output_cmnd_filename = argv[2];   // Path to the output CMND file
  unsigned int const num_events = atoi(argv[3]);      // Number of MC events to generate
  unsigned int const cm_energy = atoi(argv[4]);       // CM energy in TeV
  double const gluino_mass = atof(argv[5]);           // Gluino mass in GeV
  double const stop_mass = atof(argv[6]);             // Stop mass in GeV
  //************************************************************************************//



  //*************************** Generate the SPC file **********************************//
  FILE *spc_file = fopen(output_spc_filename.c_str(), "w");
  if(spc_file == NULL) {
    printf("!!!  ERROR: Could not open %s  !!!\n", output_spc_filename.c_str());
    exit(1);
  }
    
  int decoupled_particles[] = {25, 35, 36, 37, 1000001, 2000001, 1000002, 2000002, 1000003, 2000003, 1000004, 2000004, 1000005, 2000005, 2000006, 1000011, 2000011, 1000012, 1000013, 2000013, 1000014, 1000015, 2000015, 1000016, 1000022, 1000023, 1000025, 1000035, 1000024, 1000037};
    
  fprintf(spc_file, "# SLHA for RPV gluino simplified model\n");
  fprintf(spc_file, "#   Generated by GenerateInputs.cc\n");
  fprintf(spc_file, "\n");
  fprintf(spc_file, "BLOCK MODSEL\n");
  fprintf(spc_file, "   1   0   mssm\n");
  fprintf(spc_file, "BLOCK MASS\n");
  fprintf(spc_file, "   1000021   %-9.8E\n", gluino_mass);
  fprintf(spc_file, "   1000006   %-9.8E\n", stop_mass);
  fprintf(spc_file, "#\n");
  for(int i=0; i<30; i++) {
    fprintf(spc_file, "   %7u   1.00000000E+09\n", decoupled_particles[i]);
  }
  fprintf(spc_file, "#\n");
  
  if(stop_mass < gluino_mass - 173.5) {                                  // All particles on-shell
    fprintf(spc_file, "   DECAY   1000021   1.00000000E+00\n");
    fprintf(spc_file, "      0.5   2    6   -1000006\n");
    fprintf(spc_file, "      0.5   2    -6   1000006\n");
    fprintf(spc_file, "   DECAY   1000006   1.00000000E+00\n");
    fprintf(spc_file, "      1.0   2    -5   -3\n");
  }
  else {                                                               // Stops off-shell
    fprintf(spc_file, "   DECAY   1000021   1.00000000E+00\n");
    fprintf(spc_file, "      0.5   3     6    5    3\n");
    fprintf(spc_file, "      0.5   3    -6   -5   -3\n");
  }
  
  fclose(spc_file);
  //************************************************************************************//



  //*************************** Generate the CMND file *********************************//
  FILE *cmnd_file = fopen(output_cmnd_filename.c_str(), "w");
  if(cmnd_file == NULL) {
    printf("!!!  ERROR: Could not open %s  !!!\n", output_cmnd_filename.c_str());
    exit(1);
  }
  
  fprintf(cmnd_file, "! %s\n", output_cmnd_filename.c_str());
  fprintf(cmnd_file, "! This CMND file contains commands to be read in for a Pythia8 run.\n");
  fprintf(cmnd_file, "! Lines not beginning with a letter or digit are comments.\n");
  fprintf(cmnd_file, "\n");
  fprintf(cmnd_file, "! Run settings\n");
  fprintf(cmnd_file, "Main:numberOfEvents = %u          ! number of events to generate\n", num_events);
  fprintf(cmnd_file, "\n");
  fprintf(cmnd_file, "! Beam parameter settings\n");
  fprintf(cmnd_file, "Beams:idA = 2212                   ! first beam, p = 2212, pbar = -2212\n");
  fprintf(cmnd_file, "Beams:idB = 2212                   ! second beam, p = 2212, pbar = -2212\n");
  fprintf(cmnd_file, "Beams:eCM = %u                 ! CM energy of collision\n", cm_energy * 1000);
  fprintf(cmnd_file, "\n");
  fprintf(cmnd_file, "! Process selection\n");
  fprintf(cmnd_file, "SUSY:gg2gluinogluino = on\n");
  fprintf(cmnd_file, "SUSY:qqbar2gluinogluino = on\n");
  fprintf(cmnd_file, "\n");
  fprintf(cmnd_file, "! Forcing W's to decay leptonically\n");
  fprintf(cmnd_file, "24:oneChannel = 1 0.333414504082683 2 -11 12\n");
  fprintf(cmnd_file, "24:addChannel = 1 0.333414504082683 2 -13 14\n");
  fprintf(cmnd_file, "24:addChannel = 1 0.333170991834634 2 -15 16\n");

  fclose(cmnd_file);
  //************************************************************************************//


  return 0;
}






